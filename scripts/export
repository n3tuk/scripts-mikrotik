#!/usr/bin/env bash
# shellcheck disable=SC2154 # Some variables are managed in lib.sh
set -ueo pipefail

source "$(dirname "${0}")/common.sh"
source "$(dirname "${0}")/lib.sh"

info "${host}:${export}.${export_ext}"

declare -a gomplate_opts

config_uri=$(mktemp --dry-run --tmpdir="${exports_dir}" .XXXX-config.json)
cleanup() { rm -f "${config_uri}"; }
trap cleanup EXIT
trap cleanup SIGINT

date=$(date --iso-8601=seconds)

jq --null-input \
  --arg name "${host}" \
  --arg export "${export}" \
  --arg date "${date}" \
  '{"name":$name,"export":$export,"date":$date}' \
  > "${config_uri}"
gomplate_opts+=("--datasource" "export=${config_uri}")

sub-note "Sourcing local://${hosts_dir}/${host}.yaml"
gomplate_opts+=("--datasource" "local=${hosts_dir}/${host}.yaml")

# If vault is selected as a source in the host configuration file, then add an
# extra layer to the data processing and merging for the host
source=$(yq -r '.source' "${hosts_dir}/${host}.yaml" 2> /dev/null)
if [ "${source}" == "vault" ] && [ "${use_examples:-false}" != "true" ]; then
  vault_host=$(yq -r '.vault.host' "${hosts_dir}/${host}.yaml" 2> /dev/null)
  vault_path=$(yq -r '.vault.path' "${hosts_dir}/${host}.yaml" 2> /dev/null)
  sub-note "Sourcing vault://${vault_host}/${vault_path}"
  gomplate_opts+=("--datasource" "vault://${vault_host}/${vault_path}")
  gomplate_opts+=("--datasource" "host=merge:export|vault|local")
else
  gomplate_opts+=("--datasource" "host=merge:export|local")
fi

network_name=$(yq -r '.network' "${hosts_dir}/${host}.yaml")
gomplate_opts+=("--datasource" "network=${networks_dir}/${network_name}.yaml")
export_tmp=$(mktemp -u --suffix=.gomplate)

if gomplate \
  "${gomplate_opts[@]}" \
  --template parts=templates/parts/ \
  --file "templates/${exports_dir}/${export}.${export_ext}.t" \
  > "${export_tmp}"; then
  mv "${export_tmp}" "${export_file}.${export_ext}"
else
  error "Failed to export configuration script: ${export_file}.${export_ext}"
  rm -f "${export_tmp}"
fi
